#!/usr/bin/env escript
%% -*- erlang -*-
%%! -smp enable -sname fprof_escript -pa ebin -I include

%% ref http://erlang.org/doc/man/fprof.html#analyse-0
main([MatrixForm, TestSpec]) ->
    try        
        run(list_to_atom(MatrixForm), list_to_atom(TestSpec))
    catch
        Mod:Error ->
            io:format("~p~n",[[Mod,Error]]),
            usage()
    end;
main(_) ->
    usage().


run(all, one_rows_sums) ->
    FoldColsSumsFun = fprof_test_factory(rows_sums, 1000, 1000),
    lists:foldl(FoldColsSumsFun,[],list_of_matrix_forms());
run(all, one_cols_sums) ->
    FoldColsSumsFun = fprof_test_factory(cols_sums, 1000, 1000),
    lists:foldl(FoldColsSumsFun,[],list_of_matrix_forms());
run(MatrixForm, one_rows_sums)->
    logs_processing:fprof_test_of_matrix_sums(MatrixForm, rows_sums, 10000, 10000);  
run(MatrixForm, one_cols_sums)->
    logs_processing:fprof_test_of_matrix_sums(MatrixForm, cols_sums, 10000, 10000).
fprof_test_factory(Function, Width, Height)->
    fun(MatrixForm,Accumulator)->
            [{atom_to_list(MatrixForm),
              logs_processing:fprof_test_of_matrix_sums(
                MatrixForm, Function, Width, Height)} | Accumulator]
    end.

usage() ->
    io:format("usage: ./fprof_escript MatrixForm TestSpec\n"
              "examples:  ./fprof_escript matrix_as_array one_rows_sums").



list_of_matrix_forms()->
    [matrix_as_digraph, 
     matrix_as_array, 
     matrix_as_map, 
     matrix_as_big_tuple, 
     matrix_as_list_of_lists, 
     matrix_as_sofs].
